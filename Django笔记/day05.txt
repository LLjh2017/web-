2018        12.20        星期四




1.ORM 操作 CRUD
  1.增加
  2.查询
  3.修改
    1.查询
      得到查询实体对象 / Queryset
    2.改
      通过对象的属性来修改对象的值
    3.保存
      实体对象：调用 save()
      QuerySet:
        QuerySet的update(属性=值,属性=值) 能实现批量修改+保存
    # author=Author.objects.get(id=1)
    # author.age=99
    # author.save()

    # id不等于1
    # authors=Author.objects.exclude(id=1)
    # authors.update(age=55


  4.删除
    1.删除单个对象
      au=Author.objects.get(id=1)
      au.delete()
    2.批量删除对象
      list=Author.objects.all()
      list.delete()
练习：
  1.在 Author 实体中增加一个属性 isActive
    isActive 表示该数据是否处于有效状态
    默认为True
    isAcitve=models.BooleanField(default=True)
  2.在 03-author.html 上，点击删除时
    将对应的 author 的 isActive 改为False
  3.更改 authors_views 视图中的逻辑
    查询时,需要将 isActive为True的Author们的信息查询
    出来

  5.F查询和Q查询
    1.F查询
      示例：Author表中所有人的年龄+10岁
      update index_author set age = age + 10
      1.作用
        在执行过程中去获取某列的值
      2.语法
        from django.db.models import F 
        django:
          Author.objects.all().update(age=F('age')+10)
    2.Q查询
      示例:
        1.查询 id=1 并且 isActive=True 的Author们的信息
          Author.objects.filter(id=1,isActive=True)
        2.查询 id=1 或者 isActive=True 的Author们的信息
      1.作用
        在条件中充当或(or)的实现方式
      2.语法
        from django.db.models import Q
        Q(条件1)|Q(条件2)

        Author.objects.filter(Q(id=1)|Q(isActive=True))
  6.原生的数据库操作方法
    1.查询
      函数:raw(sql)
      语法:Entry.objects.raw(sql)
      返回:QuerySet
    2.增删改
      from django.db import connection
      def doSQL(request):
          with connection.cursor() as cursor
          sql = "update/insert/delete ... "
          cursor.execute(sql)
          return ...

2.使用后台管理 models
  1.后台的配置
    登录地址:http://localhost:8000/admin

    创建后台管理员:
      ./manage.py createsuperuser
      Username:输入用户名,如果为空则采用系统账户登录名
      Email Address:电子邮件,允许为空
      Password:密码
      Password(agian): 
  2.基本管理
    1.在应用中的 admin.py中注册要管理的实体类
      1.admin.py 
        作用：注册需要管理的Models类,只有在此注册的Models类
             才允许被管理
      2.注册Models
        from .models import *
        admin.site.register(Entry)
    2.通过Models类的内部类Meta来定义其展现形式
      class Author(models.Model):
      .......
          class Meta
            1.db_table
              指定该实体类映射到表的名字
              (该属性设置完成后需要同步回数据库)
            2.verbose_name
              定义实体类在 admin 中的显示的名字(单数)
            3.verbose_name_plural
              定义实体类在 admin 中的显示的名字(复数)
            4.ordering
              指定数据在后台管理界面中的排序方式
              取值是一个列表,将排序的列表示在列表中
              默认是升序,降序使用 -
  3.高级管理
    1.在 admin.py 中创建高级管理类并注册
      1.定义 EntryAdmin 类 继承自 admin.ModelAdmin
        class AuthorAdmin(admin.ModelAdmin):
            pass
      2.注册高级管理类
        admin.site.register(Entry,EntryAdmin)
    2.在EntryAdmin中增加的属性
      1.list_display
        作用：定义在 列表页 上要显示的字段们
        取值：由 属性名 组成的列表 或 元组
      2.list_display_links
        作用：定义在 列表页 上点击也能够跳转到详情页上的字段们
        取值：由 属性名 组成的列表 或 元组
      3.list_editable 
        作用：定义在 列表页 上就允许被编辑的字段们
        取值：由 属性名 组成的列表 或 元组
        注意：list_editable取值必须要出现在list_display中
             但不能出现在list_display_links中
      4.search_fields
        作用：添加允许被搜索的字段们
        取值：由 属性名 组成的列表 或 元组
      5.list_filter
        作用：在列表页的右侧增加过滤器，实现快速筛选
        取值：由 属性名 组成的列表 或 元组
      6.date_hierarchy
        作用：在列表页的顶部增加时间选择器，取值必须为
             DateField / DateTimeField
      7.fields 
        作用：在详情页中指定显示哪些字段以及他们的顺序
        取值：由 属性名 组成的列表 或 元组
      8.fieldsets
        作用：在详情页中对字段们进行分组显示
        注意：fields 和 fieldsets 不能同时声明
        取值：
          fieldsets=(
            #分组1
            ('分组名称'，{
              'fields':('属性1','属性2'),
              'classes':('collapse',)
            })
            ,
            #分组2
          )


3.关系映射
  1.一对一映射
    1.语法
      在关联的两个类的任意一个类中：
        属性=models.OneToOneField(Entry)
      class Author(models.Model):
          .... ....
      class Wife(models.Model):
          .... ....
          # 增加对 Author 的一对一引用
          author = models.OneToOneField(Author)
      在数据库中：
        生成一个外键列(author_id)在Wife表中,引用自Author表
        中的主键
      在Author实体中：
        会增加一个隐式属性属性 - wife,用来表示author所对应
        的wife
    2.查询
      1.正向查询：直接通过关联属性查询
        通过 wife 找 author
        wife = Wife.objects.get(id=1)
        author = wife.author
      2.反向查询：通过隐式属性查找
        通过 author 查找 wife
        author = Author.objects.get(id=1)
        wife = author.wife 
  2.一对多映射
  3.多对多映射