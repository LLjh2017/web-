2018        12.6        星期四




1.ORM的映射关系
  1.一对多关系
    1.在'多'的实体中
      属性=db.Column(db.Integer,db.Foreignkey('主表.主键'))
    2.在'一'的实体中
      添加关联属性以及反向引用关系
      属性=db.relationship('多的实体类名',backref='属性名',关系选项)
      关系选项：
        1.backref：反向引用属性名
        2.lazy：如何加载相关记录
          1.select：首次访问时加载记录
          2.immediate：源对象加载后马上加载关联记录,使用表连接
          3.subquery：同上,使用子查询
          4.noload：不加载关联记录
          5.dynamic：默认不加载记录,但会提供加载记录的查询
        3.uselist(一对一)：如果设置为False,不使用列表表示关联
                          数据,而使用标量
        4.secondary(多对多)：指定多对多的第三张关联表

示例:Course(一) 和 Teacher(多)
      一门课程可以被多名老师教授
      一名老师只能教授一门课程

class Teacher(db.Model):
    __tablename__ = "teacher"
    course_id = db.Column(db.Integer,db.ForeignKey('course.id'))

class Course(db.Model):
    __tablename__ = "course"
    #关联属性 和 反向引用关系
    teachers = db.relationship('Teacher',backref='course',lazy="dynamic")

数据操作:
  1.为 Teacher 指定 关联的 Course
    1.通过 外键列 进行关联
      tea = Teacher(xxx)
      tea.course_id = xxx
      db.session.add(tea)
    2.通过 反向引用属性 进行关联
      tea = Teacher(xxx)
      tea.course = course_obj(对象)
      db.session.add(tea)
  2.获取关联的数据
    1.通过 Teacher的对象找 Course对象
      通过 反向引用属性 找到对应的"一"的对象
      tea = Teacher.query.filter_by(id=1).first()
      cou = tea.course # tea所关联的course对象

    2.通过 Course的对象找 Teacher的对象们
      通过 关联属性 找到对应的所有的"多"的对象们
      course = Course.query.filter_by(id=1).first()
      teaList = course.teachers.all()
      for tea in teaList:
          print(tea.tname)


  2.一对一关系
    一对一的操作在关联的两个类中任何一个类中操作都可以
    1.在任意一个实体类中增加
      属性=db.Column(db.Integer,db.Foreignkey('主表.主键'),unique=True)
    2.在另一个实体类中增加
      关联属性 和 反向引用关系
      属性=db.relationship('关联的实体类名',backref='')
    实现Users和Wife的一对一的关系
    1.在Wife中增加对Users的引用(外键)
      users_id=db.Column(db.Integer,db.Foreignkey('user.id'))
    2.在Users中增加关联属性和反向引用关系
      wife=db.relationship('Wife',backref='user',uselist=False)
    指定关联数据：
      1.为Wife指定Users的关联信息
        1.通过 外键列 指定关联信息
          wife=Wife(xxx)
          wife.users_id=xxx
          db.session.add(wife)
        2.通过 反向引用属性 指定关联信息
          wife=Wife(xxx)
          wife.user=user_obj(对象)
          db.session.add(wife)
    获取关联信息
      1.通过Users的对象 获取 对应的 Wife 对象
        通过 关联属性 获取 对应的 Wife 对象
        user=Users.query.filter_by(id=1).first()
        wife=user.wife
      2.通过 Wife的对象 获取 对应的 Users 对象
        通过 反向引用属性 获取 对应的 Users 对象
        wife=Wife.query.filter_by(id=1).first()
        user=wife.user
====================================================
1.多对多的关系映射
  1.什么是多对多
    A表中的一条数据可以与B表中的任意多条数据相关联 
    B表中的一条数据可以与A表中的任意多条数据相关联
  2.在数据库中的实现
    依托于第三张关联表来实现的
  3.SQLAlchemy 创建第三张表对应


from flask import Flask
from flask_sqlalchemy import SQLAlchemy
import pymysql
pymysql.install_as_MySQLdb()

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI']="mysql://root:123456@localhost:3306/flask"
app.config['SQLALCHEMY_COMMIT_ON_TEARDOWN']=True

db = SQLAlchemy(app)

class Users(db.Model):
    __tablename__ = 'users'
    id = db.Column(db.Integer,primary_key=True)
    username = db.Column(db.String(80),nullable=False,unique=True)
    age = db.Column(db.Integer)
    email = db.Column(db.String(120),unique=True)
    isActive = db.Column(db.Boolean,default=True)

    # 添加多(Users)对多(Goods)的关联属性和反向引用关系
    # 涉及到第三张关联表 - users_goods
    goods=db.relationship('Goods',secondary='users_goods',lazy="dynamic",
                          backref=db.backref("users",lazy='dynamic'))

    # 增加对UsersGoods的关联属性和反向引用关系：目的是为了创建
    # Users类 与 UsersGoods类 之间的关系
    userGoods=db.relationship('UsersGoods',backref="user",lazy="dynamic")
class Goods(db.Model):
    __tablename__ = "goods"
    id = db.Column(db.Integer,primary_key=True)
    gname = db.Column(db.String(80))
    gprice = db.Column(db.Float)

    # 增加对UsersGoods类的关联属性和反向引用关系
    goodUsers=db.relationship('UsersGoods',backref="good",lazy="dynamic")


# 创建 users_goods 的第三张关联表,从而来表示多对多的关系
class UsersGoods(db.Model):
    __tablename__ = "users_goods"
    id = db.Column(db.Integer,primary_key=True)
    users_id = db.Column(db.Integer,db.ForeignKey('users.id'))
    goods_id = db.Column(db.Integer,db.ForeignKey('goods.id'))
    count = db.Column(db.Integer,default=1)

db.create_all()

@app.route('/01-users-goods')
def users_goods_views():
    # 为1号用户购买1号商品
    # user=Users.query.filter_by(id=1).first()
    # good=Goods.query.filter_by(id=1).first()
    # # 将good商品增加到user所购买的商品列表中
    # user.goods.append(good)
    # # 将user更新回数据库
    # db.session.add(user)


    # 为1号用户购买2号商品
    ug = UsersGoods()
    ug.users_id = 1
    ug.goods_id = 2
    ug.count = 5
    db.session.add(ug)
    return "OK"

@app.route('/02-remove-goods')
def remove_goods():
    # 获取 id 为1 的Users信息
    user = Users.query.filter_by(id=1).first()
    # 获取 id 为1 的Goods信息
    good = Goods.query.filter_by(id=1).first()
    # 将good从user中移除出去
    user.goods.remove(good)
    db.session.add(user)
    return "Remove OK"


@app.route('/03-query-goods')
def query_goods():
    # 查询1号用户购买的商品
    user=Users.query.filter_by(id=1).first()
    goods=user.goods.all()
    print(type(user.goods))
    print('用户姓名：%s'%user.username)
    for g in goods:
        print('商品名称：%s'%g.gname)
        # 查询每个商品的购买数量
        count=user.userGoods.filter_by(goods_id=g.id).first().count
        print('购买数量：%d'%count)

    # 购买2号商品的用户们
    good = Goods.query.filter_by(id=2).first()
    users = good.users.all()
    print('商品名称：%s' % good.gname)
    for u in users:
        print('用户姓名：%s'%u.username)
        # 获取购买 good 商品的 user 们的购买数量 count
        count=good.goodUsers.filter_by(users_id=u.id).first().count
        print('购买数量：%d' % count)

    return "Query OK"

if __name__ == "__main__":
    app.run(debug=True,host='0.0.0.0')



2.cookies
  1.什么是cookies
    cookies是一种数据存储手段
    将一段文本内容保存在客户端(浏览器)中的一种手段
    并可以长时间保存
  2.cookies的使用场合
    1.记住密码
    2.记住搜索文本
  3.Flask中使用cookies
    1.保存cookies到客户端
      使用响应对象,将数据保存进客户端(浏览器)
      1.resp=make_response("")
      2.resp=redirect('/xxx')

      cookies的语法：
        响应对象.set_cookie(key,value,max_age)
          key:字符串,要保存的cookies的名称
          value:字符串,要保存的cookie的值
          max_age:最大的保存时间,取值数字,以s为单位
            60
            3600
            60*60*24
            60*60*34*365
    2.在服务器端获取cookies的值
      每次向服务器发送请求时,浏览器会将cookies中所有的数据
      封装到request中并带到服务器
      request.cookies 获取所有的cookies的值
    3.删除cookies内容
      响应对象.delete_cookie('key')

3.session - 会话
  1.什么是session
    session是保存在服务器上,为每个浏览器所开辟的一段空间
    目的：保存浏览器与服务器的一些交互状态(数据)
  2.session 在 Flask 中的实现
    1.配置 SECRET_KEY
      app.config['SECRET_KEY'] = 'xxx'
    2.使用 session
      from flask import session 
      1.向session中保存数据 
        session['key'] = value
      2.从session中获取数据
        value = session['key']
        value = session.get('key')
      3.删除session中的数据
        del session['key']
  3.保存进session的内容
    多次与服务器交互时要用到的数据需要保存进 session
    如:登录信息
    
  