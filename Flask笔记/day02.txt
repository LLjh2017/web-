2018        11.29         星期四




1.模板 -Templates
  1.变量
    能够作为变量的数据类型
    字符串,整数,小数,列表,元组,字典,对象
  2.过滤器
    1.什么是过滤器
      过滤器是允许在变量输出之前按一定的规则改变变量的值
    2.语法
      {{变量|过滤器}}
      Jinja2模板中常见过滤器
      过滤器名                说明
      capitalize         首字符变大写，其他字符变小写
      lower              将值转换为小写字符
      upper              将值转换为大写字符
      title              将值中的每个单词的首字符变大写
      trim               去掉值两端的空格
      需要知道过滤器更多查文档
  3.标签
    1.什么是标签
      每个标签表示的是不同的服务器端的功能
    2.常用标签
      1.if标签
        1.基本if结构
          {% if 条件 %}
          {% endif %}
        2.if else 结构
          {% if 条件 %}
          满足条件要执行的内容
          {% else %}
          不满足条件要执行的内容
          {% endif %}
        3.if elif 结构
          {% if 条件1 %}
          满足条件1要执行的内容 
          {% elif 条件2 %}
          不满足条件1满足条件2要执行的内容
          {% elif 条件3 %}
          不满足条件1和2满足条件3要执行的内容
          {% else %}
          都不满足条件要执行的内容
          {% endif %}
      2.for结构
        {% for 变量 in 列表|元组|字典 %}
        {% endfor %} 
        内置变量：loop
          1.只能在for循环标签中使用
          2.不用声明直接使用
            作用：记录本次循环的一些信息
        loop中的常用属性
          1.index
            作用：记录当前循环的次数,从1开始计算
          2.index0
            作用：记录当前循环的下标,从0开始计算
          3.first
            作用：表示当前的循环是否为第一次循环
              True：表示为第一次循环
              Flase:表示不是第一次循环
          4.last
            作用：表示当前循环是否为最后一次循环
              True：表示为最后一次循环
              Flase:表示不是最后一次循环
      3.macro 标签(宏)
        1.作用 
          相当于在模板中声明函数
        2.语法
          使用 {% macro %} ... {% endmacro %}
          声明宏：
          {% macro 名称(参数列表) %}
          ... ...
          {% endmacro %}
          使用宏：
          {{宏名称(参数列表)}}

声明宏
{% macro showP(str) %}
    <h3>使用宏显示的内容:</h3>
    <p>{{str}}</p>
{% endmacro %}
使用宏
<div>
    {% for name in params.list %}
        {{showP(name)}}
    {% endfor %}
</div>

        3.在独立的模板文件中声明所有的宏
          1.创建macro.html 模板文件
            作用：定义项目中要用到的所有的宏
          2.在使用宏的模板上,导入macro.html
            {% import 'macro.html' as macros %}

            
  4.静态文件的处理
    1.什么是静态文件
      在Flask中不能与服务器动态交互的文件都是静态文件
    2.在Flask中处理静态文件
      1.所有的静态文件要放在 static 目录中
        static 目录要位于项目的 根目录处内
      2.所有的静态文件必须通过 /static/ 路径访问
        /static 表示要到静态资源目录中继续搜索

作业：
  1.创建Flask 项目 --Blog
  2.搭建基本项目结构
    static目录
    templates 目录
    run.py:声明路由以及视图,创建程序并启动服务
  3.搭建Blog程序
    将 xx.html copy 进 templates 中
    将 图片/css/js copy 进 static 中
  4.配置 模板中对静态文件的引用操作
    将路径都更改为 静态路径
  5.http://localhost:5000/
    能够在浏览器中显示 index.html 中的内容
